# so we can incorporate into a table later on
p.healthy.melt <- melt(adjust.healthy.val, id=1)
############################################
#Lesion area
post.disease <- posthoc.friedman.nemenyi.test(disease.area ~ date | colony.id, data = corr)
post.disease.statistic = c(1.8973666, 0.6324555,3.1622777, 1.264911, 5.059644, 3.794733)
post.disease.statistic.melt = melt(post.total.statistic, id = 1)
#taking pvalues from Nemenyi test and manually correcting them
disease.val <- c(0.536, 0.970,  0.114, 0.808,0.002,0.037 )
# Using a bonferroni correction
adjust.disease.val <- p.adjust(disease.val, method = 'bonferroni')
# Now we are melting this vector (changing it from a row to a column) so we can incorporate into a table later on
p.disease.melt <- melt(adjust.disease.val, id=1)
friedTab = data.frame("Test" = "Total Colony Size", "Comparison" = " ", "Statistic" = fried.total[["statistic"]][["Friedman chi-squared"]], "p.value" = fried.total$p.value[1]) %>%
add_row("Test" = " ", "Comparison" = c("T1 - T2", "T1 - T3", "T1 - T4", "T2 - T3", "T2 - T4", "T3 - T4"), "Statistic" = post.total.statistic.melt$value, "p.value" = p.total.melt$value) %>%
add_row("Test" = "Healthy Tissue Area", "Comparison" = " ", "Statistic" =  fried.healthy[["statistic"]][["Friedman chi-squared"]], "p.value" = fried.healthy$p.value[1]) %>%
add_row("Test" = " ", "Comparison" = c("T1 - T2", "T1 - T3", "T1 - T4", "T2 - T3", "T2 - T4", "T3 - T4"), "Statistic" = post.healthy.statistic.melt$value, "p.value" = p.healthy.melt$value) %>%
add_row("Comparison" = " ", "Test" = "Disease Lesion Area", "Statistic" =  fried.disease[["statistic"]][["Friedman chi-squared"]], "p.value" = fried.disease$p.value[1]) %>%
add_row("Test" = " ", "Comparison" = c("T1 - T2", "T1 - T3", "T1 - T4", "T2 - T3", "T2 - T4", "T3 - T4"), "Statistic" = post.disease.statistic.melt$value, "p.value" = p.disease.melt$value) %>%
mutate_if(is.numeric, round, digits = 3) %>%
mutate(p.value = replace(p.value, p.value >= 0.05, "ns")) %>%
mutate(p.value = replace(p.value, p.value < 0.001, "< 0.001")) %>%
mutate_if(is.character, str_replace_all, pattern = "-", replacement = "–") %>%
flextable() %>%
set_header_labels(Data.set = "Data set") %>%
flextable::compose(part = "header", j = "Statistic", value = as_paragraph("Test Statistic")) %>%
flextable::compose(part = "header", j = "p.value", value = as_paragraph(as_i("p"), "-value")) %>%
autofit() %>%
font(fontname = "Times New Roman", part = "all") %>%
fontsize(size = 12, part = "all") %>%
bold(part = "header") %>%
colformat_num(j = "Statistic", digits = 2) %>%
colformat_num(j = "p.value", digits = 4, na_str = "ns") %>%
align_nottext_col(align = "center", header = TRUE, footer = TRUE) %>%
align(align = "center", j = "p.value")
friedDoc = read_docx()
friedDoc = body_add_flextable(friedDoc, value = friedTab)
print(friedDoc, target = "../tables/friedTable.docx")
friedTab
set.seed(999)
perm <- adonis(formula = corr[c(5:7)] ~ site * date, data = corr, method = "euclidian", perm = 999)
perm
set.seed(999)
perm.pair <- pairwise.adonis(corr[5:7],factors=corr$site,
sim.method='euclidian',p.adjust.m='bonferroni', perm = 999)
perm.pair
permTab = data.frame("Data" = "Surface Area", "Test" = "PERMANOVA", "Comparison" = "Site", "pseudo.F" = perm$aov.tab$F.Model[1], "p.value" = perm$aov.tab$`Pr(>F)`[1]) %>%
add_row("Data" = " ", "Test" = c("Pairwise", replicate(nrow(perm.pair)-1,"")), "Comparison" = perm.pair$pairs, "pseudo.F" = perm.pair$F.Model, "p.value" = perm.pair$p.adjusted) %>%
add_row("Data" = " ", "Test" = "PERMANOVA", "Comparison" = "Date", "pseudo.F" = perm$aov.tab$F.Model[2], "p.value" = perm$aov.tab$`Pr(>F)`[2]) %>%
add_row("Data" = " ", "Test" = "PERMANOVA", "Comparison" = "Site:Date", "pseudo.F" = perm$aov.tab$F.Model[3], "p.value" = perm$aov.tab$`Pr(>F)`[3]) %>%
mutate(p.value = replace(p.value, p.value >= 0.05, NA)) %>%
mutate_if(is.character, str_replace_all, pattern = "vs", replacement = "–") %>%
flextable() %>%
set_header_labels(Data.set = "Data set") %>%
flextable::compose(part = "header", j = "pseudo.F", value = as_paragraph("Psuedo-", as_i("F"))) %>%
flextable::compose(part = "header", j = "p.value", value = as_paragraph(as_i("p"), "-value")) %>%
autofit() %>%
font(fontname = "Times New Roman", part = "all") %>%
fontsize(size = 12, part = "all") %>%
bold(part = "header") %>%
colformat_num(j = "pseudo.F", digits = 2) %>%
colformat_num(j = "p.value", digits = 4, na_str = "ns")
permanovaDoc = read_docx()
permanovaDoc = body_add_flextable(permanovaDoc, value = permTab)
print(permanovaDoc, target = "../tables/permanovaTable.docx")
permTab
# Looking at correlation between total colony size and disease lesion area
colonysize.vs.lesionarea <- cor.test(corr$total.colony.size,corr$disease.area, method="spearman", use="complete.obs")
# Looking at correlation between total colony size and the number of disease lesions on a colony
colonysize.vs.lesioncount<- cor.test(corr$total.colony.size,corr$lesion.count, method="spearman", use="complete.obs")
# Looking at correlation between the amount of lesion tissue area and number of disease lesions
lesionarea.vs.lesioncount <- cor.test(corr$disease.area,corr$lesion.count, method="spearman", use="complete.obs")
spearSizeTab = data.frame("Data" = "Rate of Tissue Loss", "Test" = "Spearman's Rank Correlation", "Comparison" = "Colony Size vs Lesion Area ", "rho" = colonysize.vs.lesionarea[["estimate"]][["rho"]], "p.value" = colonysize.vs.lesionarea$p.value) %>%
add_row("Data" = " ", "Test" = " ", "Comparison" = "Colony Size vs Lesion Count", "rho" = colonysize.vs.lesioncount[["estimate"]][["rho"]], "p.value" = colonysize.vs.lesioncount$p.value) %>%
add_row("Data" = " ", "Test" = " ", "Comparison" = "Lesion Area vs Lesion Count", "rho" = lesionarea.vs.lesioncount[["estimate"]][["rho"]], "p.value" = lesionarea.vs.lesioncount$p.value) %>%
mutate(p.value = replace(p.value, p.value >= 0.05, NA)) %>%
mutate(p.value = replace(p.value, p.value < 0.001, "< 0.001")) %>%
mutate_if(is.character, str_replace_all, pattern = "vs", replacement = "–") %>%
flextable() %>%
set_header_labels(Data.set = "Data") %>%
flextable::compose(part = "header", j = "rho", value = as_paragraph("𝜌")) %>%
flextable::compose(part = "header", j = "p.value", value = as_paragraph(as_i("p"), "-value")) %>%
autofit() %>%
font(fontname = "Times New Roman", part = "all") %>%
fontsize(size = 12, part = "all") %>%
bold(part = "header") %>%
colformat_num(j = "rho", digits = 3) %>%
colformat_num(j = "p.value", digits = 4, na_str = "ns") %>%
align(align = "center", j = "p.value") %>%
align(align = "center", j = "rho")
spearSizeDoc = read_docx()
spearSizeDoc = body_add_flextable(spearSizeDoc, value = spearSizeTab)
print(spearSizeDoc, target = "../tables/spearSizeTab.docx")
spearSizeTab
lesion.kw <- kruskal.test(lesion.count ~ site, data = corr)
lesion.kw.dunn <- dunnTest(lesion.count ~ site, data = corr, method = 'bh')
lesionKwTab = data.frame("Data" = "Lesion Count", "Test" = "Kruskal-Wallis", "Comparison" = "Site ", "TestStatistic" = lesion.kw[["statistic"]][["Kruskal-Wallis chi-squared"]], "p.value" = lesion.kw[["p.value"]]) %>%
add_row(data.frame("Data" = " ", "Test" = c("Pairwise", " ", " "), "Comparison" = lesion.kw.dunn[["res"]][["Comparison"]], "TestStatistic" = lesion.kw.dunn[["res"]][["Z"]], "p.value" = lesion.kw.dunn[["res"]][["P.adj"]]))
lesionKwTab = data.frame("Data" = "Lesion Count", "Test" = "Kruskal-Wallis", "Comparison" = "Site ", "TestStatistic" = lesion.kw[["statistic"]][["Kruskal-Wallis chi-squared"]], "p.value" = lesion.kw[["p.value"]]) %>%
add_row(data.frame("Data" = " ", "Test" = c("Pairwise", " ", " "), "Comparison" = lesion.kw.dunn[["res"]][["Comparison"]], "TestStatistic" = lesion.kw.dunn[["res"]][["Z"]], "p.value" = lesion.kw.dunn[["res"]][["P.adj"]])) %>%
mutate(p.value = replace(p.value, p.value >= 0.05, NA)) %>%
mutate(p.value = replace(p.value, p.value < 0.001, "< 0.001")) %>%
flextable() %>%
set_header_labels(Data.set = "Data") %>%
flextable::compose(part = "header", j = "TestStatistic", value = as_paragraph("Test Statistic")) %>%
flextable::compose(part = "header", j = "p.value", value = as_paragraph(as_i("p"), "-value")) %>%
autofit() %>%
font(fontname = "Times New Roman", part = "all") %>%
fontsize(size = 12, part = "all") %>%
bold(part = "header") %>%
colformat_num(j = "TestStatistic", digits = 3) %>%
colformat_num(j = "p.value", digits = 4, na_str = "ns") %>%
align(align = "center", j = "p.value") %>%
align(align = "center", j = "Test Statistic")
lesionKwTab = data.frame("Data" = "Lesion Count", "Test" = "Kruskal-Wallis", "Comparison" = "Site ", "TestStatistic" = lesion.kw[["statistic"]][["Kruskal-Wallis chi-squared"]], "p.value" = lesion.kw[["p.value"]]) %>%
add_row(data.frame("Data" = " ", "Test" = c("Pairwise", " ", " "), "Comparison" = lesion.kw.dunn[["res"]][["Comparison"]], "TestStatistic" = lesion.kw.dunn[["res"]][["Z"]], "p.value" = lesion.kw.dunn[["res"]][["P.adj"]])) %>%
mutate(p.value = replace(p.value, p.value >= 0.05, NA)) %>%
mutate(p.value = replace(p.value, p.value < 0.001, "< 0.001")) %>%
flextable() %>%
set_header_labels(Data.set = "Data") %>%
flextable::compose(part = "header", j = "TestStatistic", value = as_paragraph("Test Statistic")) %>%
flextable::compose(part = "header", j = "p.value", value = as_paragraph(as_i("p"), "-value")) %>%
autofit() %>%
font(fontname = "Times New Roman", part = "all") %>%
fontsize(size = 12, part = "all") %>%
bold(part = "header") %>%
colformat_num(j = "TestStatistic", digits = 3) %>%
colformat_num(j = "p.value", digits = 4, na_str = "ns") %>%
align(align = "center", j = "p.value") %>%
align(align = "center", j = "TestStatistic")
lesionKwTab
lesionKwDoc = read_docx()
lesionKwDoc = body_add_flextable(spearSizeDoc, value = lesionKwTab)
print(lesionKwDoc, target = "../tables/lesionKwTab.docx")
lesionKwTab
lesion.plots.patch <- total.colony.box + healthy.colony.box + disease.area.box + lesion.count.box + colony.size.disease.area + lesion.count.disease.area + lesion.count.colony.size + guide_area() + plot_layout(nrow = 4, guides = 'collect')+plot_annotation(tag_levels = 'a')
knitr::opts_chunk$set(warning = FALSE, fig.align = 'left')
knitr::opts_knit$set(root.dir = "../data")
options(width = 88)
library(magrittr)
setwd("../data")
if (!require("pacman")) install.packages("pacman")
pacman::p_load("ggplot2", "FSA", "officer", "gridExtra", "ggpubr", "Rmisc", "rcompanion", "RColorBrewer", "vegan", "nparcomp", "RVAideMemoire", "pairwiseAdonis", "PMCMR", "PMCMRplus", "patchwork", "magrittr","reshape2", "stringr", "dplyr", "flextable")
pacman::p_load_gh("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
corr <- read.csv("../data/total.correlation.csv", header = T)
str(corr)
head(corr)
# Changing values to cm^2
corr$total.colony.size <- corr$total.colony.size*10000
corr$healthy.area <- corr$healthy.area*10000
corr$disease.area <- corr$disease.area*10000
# I am reordering the dates in my data set to ensure
# that they display chronologically.
corr$site = factor(corr$site, levels=unique(corr$site))
class(corr$date)
corr$date = as.factor(corr$date)
levels(corr$date)
corr$date = factor(corr$date, levels(corr$date)[c(3, 4, 1, 2)])
levels(corr$date)
# Subsetting by timepoint, and then resetting the factor level for each timepoint
corr.t1 <- subset(corr, date == '8.24.18')
droplevels(corr.t1$date)
corr.t2 <- subset(corr, date == '9.11.18')
droplevels(corr.t2$date)
corr.t3 <- subset(corr, date == '11.8.18')
droplevels(corr.t3$date)
corr.t4 <- subset(corr, date == '12.17.18')
droplevels(corr.t4$date)
# This will be used when we analyze rates of loss and disease progression
corr.loss <- subset(corr, date != '8.24.18')
droplevels(corr.loss$date)
# Subsetting by Site
# (you can reset the factor for each site if needed from the code above)
corr.bc1 <- subset(corr, site == 'BC1')
corr.t328 <- subset(corr, site == 'T328')
corr.ftl4 <- subset(corr, site == 'FTL4')
# Average colony size from each site
mean(corr.bc1$total.colony.size)
mean(corr.t328$total.colony.size)
mean(corr.ftl4$total.colony.size)
# Subsetting the first time point from each location
corr.t1.bc1 <- subset(corr, site == "BC1")
corr.t1.t328 <- subset(corr, site == 'T328')
corr.t1.ftl4 <- subset(corr, site == "FTL4")
# Initial average colony size for each site
mean(corr.t1.bc1$total.colony.size)
mean(corr.t1.t328$total.colony.size)
mean(corr.t1.ftl4$total.colony.size)
shapiro.total <- shapiro.test(corr$total.colony.size)
shapiro.total
shapiro.healthy <-  shapiro.test(corr$healthy.area)
shapiro.healthy
shapiro.disease <- shapiro.test(corr$disease.area)
shapiro.disease
fried.total <- friedmanTest(y=corr$total.colony.size, groups = corr$date, blocks = corr$colony.id)
fried.total
fried.disease<- friedmanTest(y=corr$disease.area, groups = corr$date, blocks = corr$colony.id)
fried.disease
fried.healthy <- friedmanTest(y=corr$healthy.area, groups = corr$date, blocks = corr$colony.id)
fried.healthy
fried.lesion <- friedmanTest(y = corr$lesion.count, groups = corr$date, blocks = corr$colony.id)
fried.lesion
# Total colony size
post.total <- posthoc.friedman.nemenyi.test(total.colony.size ~ date | colony.id, data = corr)
total.p.adjust <- p.adjust(post.total$p.value, method = "bonferroni")
# Making a string of the test statistic and melting
# it into a column for making tables later
post.total.statistic = c(4.269075, 7.589466,9.012491, 3.320392, 4.743416, 1.423025)
post.total.statistic.melt = melt(post.total.statistic, id = 1)
#taking pvalues from Nemenyi test and manually correcting them
total.val <- c(0.0135,4.8e-07, 1.1e-09, 0.0875, 0.0044, 0.7458 )
# Using a bonferroni correction
adjust.total.val <- p.adjust(total.val, method = 'bonferroni')
# Now we are melting this vector (changing it from a row to a column)
# so we can incorporate into a table later on
p.total.melt <- melt(adjust.total.val, id=1)
############################################
# Healthy tissue area
post.healthy <- posthoc.friedman.nemenyi.test(healthy.area ~ date | colony.id, data = corr)
post.healthy.statistic = c(4.743416, 7.115125,8.380036, 2.371708, 3.636619, 1.264911)
post.healthy.statistic.melt = melt(post.total.statistic, id = 1)
#taking pvalues from Nemenyi test and manually correcting them
healthy.val <- c(0.0044, 2.9e-06,  1.9e-08, 0.3358,0.0497, 0.8078 )
# Using a bonferroni correction
adjust.healthy.val <- p.adjust(healthy.val, method = 'bonferroni')
# Now we are melting this vector (changing it from a row to a column)
# so we can incorporate into a table later on
p.healthy.melt <- melt(adjust.healthy.val, id=1)
############################################
#Lesion area
post.disease <- posthoc.friedman.nemenyi.test(disease.area ~ date | colony.id, data = corr)
post.disease.statistic = c(1.8973666, 0.6324555,3.1622777, 1.264911, 5.059644, 3.794733)
post.disease.statistic.melt = melt(post.total.statistic, id = 1)
#taking pvalues from Nemenyi test and manually correcting them
disease.val <- c(0.536, 0.970,  0.114, 0.808,0.002,0.037 )
# Using a bonferroni correction
adjust.disease.val <- p.adjust(disease.val, method = 'bonferroni')
# Now we are melting this vector (changing it from a row to a column) so we can incorporate into a table later on
p.disease.melt <- melt(adjust.disease.val, id=1)
friedTab = data.frame("Test" = "Total Colony Size", "Comparison" = " ", "Statistic" = fried.total[["statistic"]][["Friedman chi-squared"]], "p.value" = fried.total$p.value[1]) %>%
add_row("Test" = " ", "Comparison" = c("T1 - T2", "T1 - T3", "T1 - T4", "T2 - T3", "T2 - T4", "T3 - T4"), "Statistic" = post.total.statistic.melt$value, "p.value" = p.total.melt$value) %>%
add_row("Test" = "Healthy Tissue Area", "Comparison" = " ", "Statistic" =  fried.healthy[["statistic"]][["Friedman chi-squared"]], "p.value" = fried.healthy$p.value[1]) %>%
add_row("Test" = " ", "Comparison" = c("T1 - T2", "T1 - T3", "T1 - T4", "T2 - T3", "T2 - T4", "T3 - T4"), "Statistic" = post.healthy.statistic.melt$value, "p.value" = p.healthy.melt$value) %>%
add_row("Comparison" = " ", "Test" = "Disease Lesion Area", "Statistic" =  fried.disease[["statistic"]][["Friedman chi-squared"]], "p.value" = fried.disease$p.value[1]) %>%
add_row("Test" = " ", "Comparison" = c("T1 - T2", "T1 - T3", "T1 - T4", "T2 - T3", "T2 - T4", "T3 - T4"), "Statistic" = post.disease.statistic.melt$value, "p.value" = p.disease.melt$value) %>%
mutate_if(is.numeric, round, digits = 3) %>%
mutate(p.value = replace(p.value, p.value >= 0.05, "ns")) %>%
mutate(p.value = replace(p.value, p.value < 0.001, "< 0.001")) %>%
mutate_if(is.character, str_replace_all, pattern = "-", replacement = "–") %>%
flextable() %>%
set_header_labels(Data.set = "Data set") %>%
flextable::compose(part = "header", j = "Statistic", value = as_paragraph("Test Statistic")) %>%
flextable::compose(part = "header", j = "p.value", value = as_paragraph(as_i("p"), "-value")) %>%
autofit() %>%
font(fontname = "Times New Roman", part = "all") %>%
fontsize(size = 12, part = "all") %>%
bold(part = "header") %>%
colformat_num(j = "Statistic", digits = 2) %>%
colformat_num(j = "p.value", digits = 4, na_str = "ns") %>%
align_nottext_col(align = "center", header = TRUE, footer = TRUE) %>%
align(align = "center", j = "p.value")
friedDoc = read_docx()
friedDoc = body_add_flextable(friedDoc, value = friedTab)
print(friedDoc, target = "../tables/friedTable.docx")
friedTab
set.seed(999)
perm <- adonis(formula = corr[c(5:7)] ~ site * date, data = corr, method = "euclidian", perm = 999)
perm
set.seed(999)
perm.pair <- pairwise.adonis(corr[5:7],factors=corr$site,
sim.method='euclidian',p.adjust.m='bonferroni', perm = 999)
perm.pair
permTab = data.frame("Data" = "Surface Area", "Test" = "PERMANOVA", "Comparison" = "Site", "pseudo.F" = perm$aov.tab$F.Model[1], "p.value" = perm$aov.tab$`Pr(>F)`[1]) %>%
add_row("Data" = " ", "Test" = c("Pairwise", replicate(nrow(perm.pair)-1,"")), "Comparison" = perm.pair$pairs, "pseudo.F" = perm.pair$F.Model, "p.value" = perm.pair$p.adjusted) %>%
add_row("Data" = " ", "Test" = "PERMANOVA", "Comparison" = "Date", "pseudo.F" = perm$aov.tab$F.Model[2], "p.value" = perm$aov.tab$`Pr(>F)`[2]) %>%
add_row("Data" = " ", "Test" = "PERMANOVA", "Comparison" = "Site:Date", "pseudo.F" = perm$aov.tab$F.Model[3], "p.value" = perm$aov.tab$`Pr(>F)`[3]) %>%
mutate(p.value = replace(p.value, p.value >= 0.05, NA)) %>%
mutate_if(is.character, str_replace_all, pattern = "vs", replacement = "–") %>%
flextable() %>%
set_header_labels(Data.set = "Data set") %>%
flextable::compose(part = "header", j = "pseudo.F", value = as_paragraph("Psuedo-", as_i("F"))) %>%
flextable::compose(part = "header", j = "p.value", value = as_paragraph(as_i("p"), "-value")) %>%
autofit() %>%
font(fontname = "Times New Roman", part = "all") %>%
fontsize(size = 12, part = "all") %>%
bold(part = "header") %>%
colformat_num(j = "pseudo.F", digits = 2) %>%
colformat_num(j = "p.value", digits = 4, na_str = "ns")
permanovaDoc = read_docx()
permanovaDoc = body_add_flextable(permanovaDoc, value = permTab)
print(permanovaDoc, target = "../tables/permanovaTable.docx")
permTab
# Looking at correlation between total colony size and disease lesion area
colonysize.vs.lesionarea <- cor.test(corr$total.colony.size,corr$disease.area, method="spearman", use="complete.obs")
# Looking at correlation between total colony size and the number of disease lesions on a colony
colonysize.vs.lesioncount<- cor.test(corr$total.colony.size,corr$lesion.count, method="spearman", use="complete.obs")
# Looking at correlation between the amount of lesion tissue area and number of disease lesions
lesionarea.vs.lesioncount <- cor.test(corr$disease.area,corr$lesion.count, method="spearman", use="complete.obs")
spearSizeTab = data.frame("Data" = "Rate of Tissue Loss", "Test" = "Spearman's Rank Correlation", "Comparison" = "Colony Size vs Lesion Area ", "rho" = colonysize.vs.lesionarea[["estimate"]][["rho"]], "p.value" = colonysize.vs.lesionarea$p.value) %>%
add_row("Data" = " ", "Test" = " ", "Comparison" = "Colony Size vs Lesion Count", "rho" = colonysize.vs.lesioncount[["estimate"]][["rho"]], "p.value" = colonysize.vs.lesioncount$p.value) %>%
add_row("Data" = " ", "Test" = " ", "Comparison" = "Lesion Area vs Lesion Count", "rho" = lesionarea.vs.lesioncount[["estimate"]][["rho"]], "p.value" = lesionarea.vs.lesioncount$p.value) %>%
mutate(p.value = replace(p.value, p.value >= 0.05, NA)) %>%
mutate(p.value = replace(p.value, p.value < 0.001, "< 0.001")) %>%
mutate_if(is.character, str_replace_all, pattern = "vs", replacement = "–") %>%
flextable() %>%
set_header_labels(Data.set = "Data") %>%
flextable::compose(part = "header", j = "rho", value = as_paragraph("𝜌")) %>%
flextable::compose(part = "header", j = "p.value", value = as_paragraph(as_i("p"), "-value")) %>%
autofit() %>%
font(fontname = "Times New Roman", part = "all") %>%
fontsize(size = 12, part = "all") %>%
bold(part = "header") %>%
colformat_num(j = "rho", digits = 3) %>%
colformat_num(j = "p.value", digits = 4, na_str = "ns") %>%
align(align = "center", j = "p.value") %>%
align(align = "center", j = "rho")
spearSizeDoc = read_docx()
spearSizeDoc = body_add_flextable(spearSizeDoc, value = spearSizeTab)
print(spearSizeDoc, target = "../tables/spearSizeTab.docx")
lesion.kw <- kruskal.test(lesion.count ~ site, data = corr)
lesion.kw.dunn <- dunnTest(lesion.count ~ site, data = corr, method = 'bh')
lesionKwTab = data.frame("Data" = "Lesion Count", "Test" = "Kruskal-Wallis", "Comparison" = "Site ", "TestStatistic" = lesion.kw[["statistic"]][["Kruskal-Wallis chi-squared"]], "p.value" = lesion.kw[["p.value"]]) %>%
add_row(data.frame("Data" = " ", "Test" = c("Pairwise", " ", " "), "Comparison" = lesion.kw.dunn[["res"]][["Comparison"]], "TestStatistic" = lesion.kw.dunn[["res"]][["Z"]], "p.value" = lesion.kw.dunn[["res"]][["P.adj"]])) %>%
mutate_if(is.numeric, round, digits = 3) %>%
mutate(p.value = replace(p.value, p.value >= 0.05, NA)) %>%
mutate(p.value = replace(p.value, p.value < 0.001, "< 0.001")) %>%
flextable() %>%
set_header_labels(Data.set = "Data") %>%
flextable::compose(part = "header", j = "TestStatistic", value = as_paragraph("Test Statistic")) %>%
flextable::compose(part = "header", j = "p.value", value = as_paragraph(as_i("p"), "-value")) %>%
autofit() %>%
font(fontname = "Times New Roman", part = "all") %>%
fontsize(size = 12, part = "all") %>%
bold(part = "header") %>%
colformat_num(j = "TestStatistic", digits = 3) %>%
colformat_num(j = "p.value", digits = 4, na_str = "ns") %>%
align(align = "center", j = "p.value") %>%
align(align = "center", j = "TestStatistic")
lesionKwDoc = read_docx()
lesionKwDoc = body_add_flextable(spearSizeDoc, value = lesionKwTab)
print(lesionKwDoc, target = "../tables/lesionKwTab.docx")
lesionKwTab
# This forces y axis labels to have 1 decimal place.
scale <- function(x) sprintf("%.0f", x)
# Plotting a boxplot of mean total colony size for each site at each timepoint.
total.colony.box.1 <-
ggplot(data = corr, aes(x = date, y = total.colony.size))+
geom_boxplot(aes(fill = site), alpha = 1, outlier.shape = NA, color = "black") +
geom_point(aes(fill = site), color = "black", size = 3, position = position_jitterdodge()) +
scale_fill_manual(values = c("#7BA46C", "#EACF9E", "#008D91")) +
scale_x_discrete(labels = c(expression('T'[1]), expression('T'[2]), expression('T'[3]), expression('T'[4])))+
labs(x = "Time", y = bquote("Total Colony Area" ~ (cm^2)),fill = 'Site') +
scale_y_continuous(labels = scale)+
theme(legend.title = element_blank(),
legend.text = element_text(color = "black", size = 25),
legend.background = element_blank())+
facet_grid(.~site,scales="free")
total.colony.box.1
total.colony.box <- total.colony.box.1 + theme(
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = '#F5F5F5'),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
text = element_text(size=15, color="black"),
axis.text.x=element_text(size=12, color="black"),
axis.text.y=element_text(size=12, color="black"),
axis.title.y = element_text(size = 18, color = 'black'),
plot.margin = unit(c(0.5, 1, 0.5, 1), "cm"))+
rremove("legend")
total.colony.box
# This forces y axis labels to have 1 decimal place.
scale <- function(x) sprintf("%.0f", x)
# Plotting a boxplot of mean healthy tissue area for each site at each timepoint.
healthy.colony.box.1 <-
ggplot(data = corr, aes(x = date, y = healthy.area))+
geom_boxplot(aes(fill = site), alpha = 1, outlier.shape = NA, color = "black") +
geom_point(aes(fill = site), color = "black", size = 3, position = position_jitterdodge()) +
scale_fill_manual(values = c("#7BA46C", "#EACF9E", "#008D91")) +
scale_x_discrete(labels = c(expression('T'[1]), expression('T'[2]), expression('T'[3]), expression('T'[4])))+
labs(x = "Time", y = bquote("Healthy Tissue Area" ~ (cm^2)),fill = 'Site') +
scale_y_continuous(labels = scale)+
theme(legend.title = element_blank(),
legend.text = element_text(color = "black", size = 25),
legend.background = element_blank())+
facet_grid(.~site,scales="free")
healthy.colony.box.1
healthy.colony.box <- healthy.colony.box.1 + theme(
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = '#F5F5F5'),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
text = element_text(size=15, color="black"),
axis.text.x=element_text(size=12, color="black"),
axis.text.y=element_text(size=12, color="black"),
axis.title.y = element_text(size = 18, color = 'black'),
plot.margin = unit(c(0.5, 1, 0.5, 0.5), "cm"))+
rremove("legend")
healthy.colony.box
# Plotting box plot of mean disease lesion area for each site at each timepoint.
disease.area.box.1 <-
ggplot(data = corr, aes(x = date, y = disease.area))+
geom_boxplot(aes(fill = site), alpha = 1, outlier.shape = NA, color = "black") +
geom_point(aes(fill = site), color = "black", size = 3, position = position_jitterdodge()) +
scale_fill_manual(values = c("#7BA46C", "#EACF9E", "#008D91")) +
scale_x_discrete(labels = c(expression('T'[1]), expression('T'[2]), expression('T'[3]), expression('T'[4])))+
labs(x = "Time", y = bquote('Disease Lesion Area'~(cm^2)), fill = 'Site') +
scale_y_continuous(labels = scale)+
theme(legend.title = element_blank(),
legend.text = element_text(color = "black", size = 25),
legend.background = element_blank())+
facet_grid(.~site,scales="free")
disease.area.box.1
disease.area.box <- disease.area.box.1 + theme(
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = '#F5F5F5'),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
text = element_text(size=15, color="black"),
axis.text.x=element_text(size=12, color="black"),
axis.text.y=element_text(size=12, color="black"),
axis.title.y = element_text(size = 18, color = 'black'),
plot.margin = unit(c(0.5, 1, 0.5, 1), "cm"))+
rremove("legend")
disease.area.box
# Plotting box plot of mean lesion count for each site at each timepoint.
lesion.count.box.1 <- ggplot(data = corr, aes(x = date, y = lesion.count))+
geom_boxplot(aes(fill = site), alpha = 1, outlier.shape = NA, color = "black") +
geom_point(aes(fill = site), color = "black", size = 3, position = position_jitterdodge()) +
scale_fill_manual(values = c("#7BA46C", "#EACF9E", "#008D91")) +
scale_x_discrete(labels = c(expression('T'[1]), expression('T'[2]), expression('T'[3]), expression('T'[4])))+
labs(x = "Site", y = "Number of Lesions", fill = 'Site') +
scale_y_continuous(labels = scale)+
theme(legend.title = element_blank(),
legend.text = element_text(color = "black", size = 25),
legend.background = element_blank())+
facet_grid(.~site,scales="free")
lesion.count.box.1
lesion.count.box <- lesion.count.box.1 + theme(
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = '#F5F5F5'),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
text = element_text(size=15, color="black"),
axis.text.x=element_text(size=12, color="black"),
axis.text.y=element_text(size=12, color="black"),
axis.title.y = element_text(size = 18, color = 'black'),
plot.margin = unit(c(0.5, 1, 0.5, 2), "cm"))+
rremove("legend")
lesion.count.box
# No correlation
lesion.count.colony.size.1 <-ggplot(corr, aes(x = total.colony.size, y = lesion.count, color = site))+
geom_point(size = 5)+
scale_color_manual(values = c("#7BA46C", "#EACF9E", "#008D91"))+
labs(x = bquote('Total Colony Size'~(cm^2)), y = bquote('Cattle Tag Error'~(cm^2)))+
scale_y_continuous(labels = scale)
lesion.count.colony.size <- lesion.count.colony.size.1 +
theme(panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),                 panel.background = element_rect(fill = '#F5F5F5'),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
text = element_text(size=15, color="black"),
axis.text.x=element_text(size=12, color="black"),
axis.text.y=element_text(size=12, color="black"),
axis.title.y = element_text(size = 18, color = 'black'),
plot.margin = unit(c(0.5, 1, 0.5, 1.75), "cm"))+
rremove("legend")
lesion.count.colony.size
# Significant Correlation
lesion.count.disease.area.1 <-ggplot(corr, aes(x = disease.area, y = lesion.count, color = site))+
geom_point(size = 5)+
geom_smooth(method = "lm", fill = 'grey30', color = 'grey30')+
scale_color_manual(values = c("#7BA46C", "#EACF9E", "#008D91"))+
labs(x = bquote('Disease Lesion Area'~(cm^2)), y = "Lesion Count") +
scale_y_continuous(labels = scale)
lesion.count.disease.area.1
lesion.count.disease.area <- lesion.count.disease.area.1 +
theme(panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),                 panel.background = element_rect(fill = '#F5F5F5'),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
text = element_text(size=15, color="black"),
axis.text.x=element_text(size=12, color="black"),
axis.text.y=element_text(size=12, color="black"),
axis.title.y = element_text(size = 18, color = 'black'),
plot.margin = unit(c(0.5, 1, 0.5, 1.57), "cm"))+
rremove("legend")
lesion.count.disease.area
colony.size.disease.area.1 <-ggplot(corr, aes(x = total.colony.size, y = disease.area, color = site))+
geom_point(size = 5)+
scale_color_manual(values = c("#7BA46C", "#EACF9E", "#008D91"))+
labs(x = bquote('Total Colony Area'~(cm^2)), y = bquote('Disease Lesion Area'~(cm^2))) +
scale_y_continuous(labels = scale)
colony.size.disease.area.1
colony.size.disease.area <- colony.size.disease.area.1 +
theme(panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),                 panel.background = element_rect(fill = '#F5F5F5'),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
text = element_text(size=15, color="black"),
axis.text.x=element_text(size=12, color="black"),
axis.text.y=element_text(size=12, color="black"),
axis.title.y = element_text(size = 18, color = 'black'),
plot.margin = unit(c(0.5, 1, 0.5, 1.5), "cm"))+
rremove("legend")
colony.size.disease.area
lesion.plots.patch <- total.colony.box + healthy.colony.box + disease.area.box + lesion.count.box + colony.size.disease.area + lesion.count.disease.area + lesion.count.colony.size + guide_area() + plot_layout(nrow = 4, guides = 'collect')+plot_annotation(tag_levels = 'a')
## Save
ggsave("../figures/lesion.plots.png",  plot= lesion.plots.patch, width=20, height=20, units="in", dpi=600)
